{"version":3,"sources":["components/Price.js","components/dashboard.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Price","react_default","a","createElement","this","props","fromSymbol","price","toSymbol","Component","Dashboard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","URL_SYMBOL","URL_PRICE","state","symbols","result","handleChangeFrom","bind","assertThisInitialized","handleChangeTo","handleSubmit","_this2","console","log","fetch","then","resp","json","data","setState","catch","err","event","target","value","getlatestprice","_this3","concat","keys","preventDefault","className","onSubmit","onChange","map","index","key","type","components_Price","Header","App","header","components_dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8aefda9.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Price extends Component {\n    render() {\n      return (\n        <div>\n          <h2> 1 {this.props.fromSymbol} = {this.props.price} {this.props.toSymbol}</h2>\n        </div>\n      );\n    }\n  }\n\nexport default Price;","import React, {Component} from 'react';\nimport './dashboard.css';\nimport Price from './Price';\n\nclass Dashboard extends Component {\n\n  URL_SYMBOL = '/symbols'\n  URL_PRICE = '/price'\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fromSymbol: 'USD',\n      toSymbol: 'SGD',\n      symbols: [],\n      result: ''\n    };\n\n    this.handleChangeFrom = this.handleChangeFrom.bind(this);\n    this.handleChangeTo = this.handleChangeTo.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n  }\n\n  componentDidMount(){\n    console.log(\"Making API Call /symbols \")\n    fetch(this.URL_SYMBOL)\n      .then(resp => resp.json())\n      .then((data) => {\n        this.setState( { symbols: data })\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n\n  }\n\n  handleChangeFrom(event) {\n    this.setState({fromSymbol: event.target.value});\n    this.getlatestprice()\n  }\n  handleChangeTo(event) {\n    this.setState({toSymbol: event.target.value});\n    this.getlatestprice()\n  }\n\n  getlatestprice(){\n    fetch(`${this.URL_PRICE}?from=${this.state.fromSymbol}&to=${this.state.toSymbol}`)\n      .then(resp => resp.json())\n      .then((data) => {\n        this.setState( { result: data[Object.keys(data)] }) /* data[this.state.toSymbol] */\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  handleSubmit(event) {\n    this.getlatestprice()\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"dashbox\">\n        <form onSubmit={this.handleSubmit}>\n          <h3> Pick Your  </h3>\n          <label>\n            From Symbol : &nbsp; \n            <select value={this.state.fromSymbol} onChange={this.handleChangeFrom}>\n              { \n                this.state.symbols.map((value, index) => { return <option key={index} value={value}>{value}</option>})\n              }\n            </select>\n          </label>\n          \n          &nbsp;\n\n          <label>\n            To Symbol : &nbsp; \n            <select value={this.state.toSymbol} onChange={this.handleChangeTo}>\n              { \n                this.state.symbols.map((value, index) => { return <option key={index} value={value}>{value}</option>})\n              }\n            </select>\n          </label>\n          \n          <br />\n          <br />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        \n        <Price fromSymbol={this.state.fromSymbol} toSymbol={this.state.toSymbol} price={this.state.result}> </Price>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;","import React, {Component} from 'react';\n\nclass Header extends Component {\n    render() {\n      return <h1>Exchange Rates App</h1>;\n    }\n  }\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/dashboard';\nimport Header from './components/header';\n\nfunction App() {\n  return (\n    <div className=\"MainBox\">\n      \n      <div className=\"header\">\n        <Header > </Header>  \n      </div>\n\n      <div className=\"dashboard\">\n        <Dashboard > </Dashboard>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}