{"version":3,"sources":["components/Price.js","components/Graph.js","components/dashboard.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Price","react_default","a","createElement","this","props","fromSymbol","price","toSymbol","Component","Graph","es6","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","PureComponent","Dashboard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","URL_SYMBOL","URL_PRICE","URL_HISTORY","state","symbols","result","history","handleChangeFrom","bind","assertThisInitialized","handleChangeTo","handleSubmit","gethistory","getlatestprice","_this2","console","log","fetch","then","resp","json","setState","catch","err","event","target","value","_this3","concat","keys","_this4","records","preventDefault","className","onSubmit","onChange","map","index","key","components_Price","Graph_Graph","Header","App","header","components_dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ad4a624.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Price extends Component {\n    render() {\n      return (\n        <div>\n          <h2> 1 {this.props.fromSymbol} = {this.props.price} {this.props.toSymbol}</h2>\n        </div>\n      );\n    }\n  }\n\nexport default Price;","import React, { PureComponent } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst data = [\n  {\n    name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\n  },\n  {\n    name: 'Page B', uv: 3000, pv: 1398, amt: 2210,\n  },\n  {\n    name: 'Page C', uv: 2000, pv: 9800, amt: 2290,\n  },\n  {\n    name: 'Page D', uv: 2780, pv: 3908, amt: 2000,\n  },\n  {\n    name: 'Page E', uv: 1890, pv: 4800, amt: 2181,\n  },\n  {\n    name: 'Page F', uv: 2390, pv: 3800, amt: 2500,\n  },\n  {\n    name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\n  },\n];\n\nexport default class Graph extends PureComponent {\n  render() {\n    return (\n      <LineChart\n        width={1000} height={350}\n        data={this.props.data}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"time\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"open\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"close\" stroke=\"#82ca9d\" />\n      </LineChart>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport './dashboard.css';\nimport Price from './Price';\nimport Graph from './Graph';\n\nclass Dashboard extends Component {\n\n  // URL_SYMBOL = 'http://localhost:5000/symbols'\n  // URL_PRICE = 'http://localhost:5000/price'\n  // URL_HISTORY = 'http://localhost:5000/history'\n\n  URL_SYMBOL = '/symbols'\n  URL_PRICE = '/price'\n  URL_HISTORY = '/history'\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fromSymbol: 'USD',\n      toSymbol: 'SGD',\n      symbols: [],\n      result: '',\n      history: []\n    };\n\n    this.handleChangeFrom = this.handleChangeFrom.bind(this);\n    this.handleChangeTo = this.handleChangeTo.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.gethistory = this.gethistory.bind(this);\n    this.getlatestprice = this.getlatestprice.bind(this);\n\n  }\n\n  componentDidMount(){\n    console.log(\"Making API Call /symbols \")\n    fetch(this.URL_SYMBOL)\n      .then(resp => resp.json())\n      .then((data) => {\n        this.setState( { symbols: data })\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n\n  }\n\n  handleChangeFrom(event) {\n    this.setState({fromSymbol: event.target.value});\n    this.getlatestprice()\n    this.gethistory()\n  }\n  handleChangeTo(event) {\n    this.setState({toSymbol: event.target.value});\n    this.getlatestprice()\n    this.gethistory()\n  }\n\n  getlatestprice(){\n    fetch(`${this.URL_PRICE}?from=${this.state.fromSymbol}&to=${this.state.toSymbol}`)\n      .then(resp => resp.json())\n      .then((data) => {\n        this.setState( { result: data[Object.keys(data)] }) /* data[this.state.toSymbol] */\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  gethistory(){\n    fetch(`${this.URL_HISTORY}?fsym=${this.state.fromSymbol}&tsym=${this.state.toSymbol}&limit=1000`)\n      .then(resp => resp.json())\n      .then((data) => {\n        let records = data[\"Data\"]\n        \n        this.setState( { history: records })\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  handleSubmit(event) {\n    this.getlatestprice()\n    this.gethistory()\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"dashbox\">\n        <form onSubmit={this.handleSubmit}>\n          <h3> Pick Your  </h3>\n          <label>\n            From Symbol : &nbsp; \n            <select value={this.state.fromSymbol} onChange={this.handleChangeFrom}>\n              { \n                this.state.symbols.map((value, index) => { return <option key={index} value={value}>{value}</option>})\n              }\n            </select>\n          </label>\n          \n          &nbsp;\n\n          <label>\n            To Symbol : &nbsp; \n            <select value={this.state.toSymbol} onChange={this.handleChangeTo}>\n              { \n                this.state.symbols.map((value, index) => { return <option key={index} value={value}>{value}</option>})\n              }\n            </select>\n          </label>\n          \n          <br />\n          <br />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        \n        <Price fromSymbol={this.state.fromSymbol} toSymbol={this.state.toSymbol} price={this.state.result}> </Price>\n        \n        <div className=\"graph\">\n          <Graph data={this.state.history} > </Graph>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;","import React, {Component} from 'react';\n\nclass Header extends Component {\n    render() {\n      return <h1>Exchange Rates App</h1>;\n    }\n  }\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/dashboard';\nimport Header from './components/header';\n\nfunction App() {\n  return (\n    <div className=\"MainBox\">\n      \n      <div className=\"header\">\n        <Header > </Header>  \n      </div>\n\n      <div className=\"dashboard\">\n        <Dashboard > </Dashboard>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}